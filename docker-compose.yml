version: '3.9'
services:
  app:
    container_name: app
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_TEST_HOST=testdb
      - SERVER_PORT=${SERVER_PORT}
      - SERVER_HOST=${SERVER_HOST}
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.2'
    #       memory: 80M
    #     reservations:
    #       cpus: '0.1'
    #       memory: 20M
  db:
    container_name: db
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PGPORT=${DB_PORT}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME -h $DB_HOST -p $DB_PORT"]
      interval: 2s
      retries: 3
      start_period: 2s
    networks:
      - app-network
  testdb:
    container_name: testdb
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_TEST_USER}
      - POSTGRES_PASSWORD=${DB_TEST_PASS}
      - POSTGRES_DB=${DB_TEST_NAME}
      - PGPORT=${DB_TEST_PORT}
      - TEST_MODEL_DB=${TEST_MODEL_DB}
      - TEST_INTEGRATION_DB=${TEST_INTEGRATION_DB}
      - TEST_MIDDLEWARE_DB=${TEST_MIDDLEWARE_DB}
    ports:
      - "${DB_TEST_PORT}:${DB_TEST_PORT}"
    volumes:
      - ./test-database-dataset:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_TEST_USER -d $DB_TEST_NAME -h $DB_TEST_HOST -p $DB_TEST_PORT"]
      interval: 2s
      retries: 3
      start_period: 2s
    networks:
      - app-network

volumes:
  db-data:
networks:
  app-network:
    driver: bridge

